{"version":3,"sources":["editors/CSVEditor.tsx","components/Navigation.tsx","editors/JSONEditor.tsx","editors/DataGridEditor.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CSVDelimeter","NAVIGATION_HEIGHT","CONFIG_BAR_HEIGHT","Navigation","renderLogo","className","renderButtons","buttons","EditorMode","CSV","GRID","JSON","map","mode","Item","key","onClick","props","onModeChange","theme","defaultSelectedKeys","style","lineHeight","Header","this","Component","defaultState","csv","editorHeight","delimeter","SEMICOLON","CSVEditor","state","window","localStorage","getItem","updateEditorHeight","setState","innerHeight","parseSourceItemsToCsv","csvString","source","updateSourceItemsByCsvString","sourceItems","onSourceChange","handleChange","handleDelimeterChange","e","value","target","setItem","renderConfigBar","Group","onChange","size","COMMA","VARTICAL_BAR","item","index","addEventListener","removeEventListener","name","width","height","editorProps","$blockScrolling","json","JSONEditor","parseSourceItemsToJson","stringify","parse","MIN_GRID_ROWS","MIN_GRID_COLUMNS","getEmptyRow","columnsCount","row","i","getMultipleEmptyRows","rowsCount","emptyRow","rows","activeRow","activeCol","grid","DataGridEditor","parseSourceItemsToGrid","sourceRowsLength","length","rowIndex","rowColumnsLength","rowCellIndex","_cell","columnsToAdd","addColumnIndex","rowsToAdd","addRowIndex","updateSourceItemsByDataGrid","gridRows","gridRowIndex","gridRowsLength","reverseGridRows","reverse","notEmptyCellIndex","findIndex","Boolean","nonEmptyCells","slice","nonEmptyCellIndex","addNewRowIfLastIsActive","onActivate","column","debounce","data","modeToComponentMap","Object","freeze","App","handleModeChange","handleSourceChange","EditorComponent","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88fc8f8e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport AceEditor from \"react-ace\";\nimport { Radio } from \"antd\";\nimport { RadioChangeEvent } from \"antd/lib/radio\";\n// @ts-ignore\nimport * as csvString from \"csv-string\";\nimport brace from \"brace\"; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nimport \"brace/theme/github\";\nimport \"brace/mode/json\";\n\nimport { EditorProps } from \"./types\";\nimport { NAVIGATION_HEIGHT, CONFIG_BAR_HEIGHT } from \"../components/Navigation\";\n\nenum CSVDelimeter {\n  SEMICOLON = \";\",\n  COMMA = \",\",\n  VARTICAL_BAR = \"|\"\n}\n\ninterface Props extends EditorProps { }\n\ninterface State {\n  csv: string;\n  delimeter: CSVDelimeter;\n  editorHeight: number;\n}\n\nconst defaultState: State = {\n  csv: \"\",\n  editorHeight: 0,\n  delimeter: CSVDelimeter.SEMICOLON\n}\n\nexport class CSVEditor extends Component<Props, State> {\n  state = {\n    ...defaultState,\n    delimeter: 'localStorage' in window\n      ? window.localStorage.getItem('delimeter') as CSVDelimeter || CSVDelimeter.SEMICOLON\n      : CSVDelimeter.SEMICOLON\n  };\n\n  componentDidMount() {\n    window.addEventListener('resize', () => this.updateEditorHeight())\n\n    this.updateEditorHeight()\n    this.parseSourceItemsToCsv();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', () => this.updateEditorHeight())\n\n    this.setState(defaultState);\n  }\n\n  updateEditorHeight = () => this.setState({\n    editorHeight: window.innerHeight - NAVIGATION_HEIGHT - CONFIG_BAR_HEIGHT\n  })\n\n  parseSourceItemsToCsv = () => this.setState({\n    csv: csvString.stringify(this.props.source, this.state.delimeter)\n  });\n\n  updateSourceItemsByCsvString = () => {\n    const sourceItems = csvString.parse(this.state.csv);\n\n    this.props.onSourceChange(sourceItems);\n  }\n\n  handleChange = (csv: string) => this.setState({\n    csv\n  }, () => this.updateSourceItemsByCsvString());\n\n  handleDelimeterChange = (e: RadioChangeEvent) => {\n    const { value } = e.target;\n\n    this.setState({\n      delimeter: value\n    });\n\n    if ('localStorage' in window) {\n      window.localStorage.setItem('delimeter', value);\n    }\n  }\n\n  renderConfigBar = () => (\n    <div className=\"ConfigBar\">\n      <div className=\"ConfigBarWidget\">\n        <span className=\"ConfigBarWidgetLabel\">CSV Delimeter:</span>\n        <span className=\"ConfigBarWidgetContent\">\n          <Radio.Group\n            onChange={this.handleDelimeterChange}\n            value={this.state.delimeter}\n            size=\"small\"\n          >\n            {[\n              CSVDelimeter.SEMICOLON,\n              CSVDelimeter.COMMA,\n              CSVDelimeter.VARTICAL_BAR\n            ].map((item, index) => (\n              <Radio\n                key={`item_${index}`}\n                value={item}\n              >\n                <small>{item}</small>\n              </Radio>\n            ))}\n          </Radio.Group>\n        </span>\n      </div>\n    </div>\n  )\n\n  render() {\n    return (\n      <>\n        {this.renderConfigBar()}\n        <AceEditor\n          mode=\"text\"\n          theme=\"github\"\n          onChange={this.handleChange}\n          value={this.state.csv}\n          name=\"csv_editor\"\n          width=\"100%\"\n          height={`${this.state.editorHeight}px`}\n          editorProps={{ $blockScrolling: true }}\n        />\n      </>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport { Layout, Menu } from \"antd\";\n\nimport { EditorMode } from \"../App\";\n\ninterface Props {\n  onModeChange: (mode: EditorMode) => void;\n  mode: EditorMode;\n}\n\ninterface State { }\n\nexport const NAVIGATION_HEIGHT = 64;\nexport const CONFIG_BAR_HEIGHT = 40;\n\nexport class Navigation extends Component<Props, State> {\n  renderLogo = () => {\n    return (\n      <div className=\"logo\">\n        CSV Editor\n      </div>\n    );\n  }\n\n  renderButtons = () => {\n    const buttons = [\n      EditorMode.CSV,\n      EditorMode.GRID,\n      EditorMode.JSON\n    ].map(mode => (\n      <Menu.Item\n        key={mode}\n        onClick={() => this.props.onModeChange(mode)}\n      >\n        {mode}\n      </Menu.Item>\n    ));\n\n    return (\n      <Menu\n        theme=\"dark\"\n        mode=\"horizontal\"\n        defaultSelectedKeys={[EditorMode.CSV]}\n        style={{ lineHeight: `${NAVIGATION_HEIGHT}px` }}\n      >\n        {buttons}\n      </Menu>\n    );\n  }\n\n  render() {\n    return (\n      <Layout.Header>\n        {this.renderLogo()}\n        {this.renderButtons()}\n      </Layout.Header>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport AceEditor from \"react-ace\";\nimport brace from \"brace\"; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nimport \"brace/theme/github\";\nimport \"brace/mode/json\";\n\nimport { EditorProps } from \"./types\";\nimport { NAVIGATION_HEIGHT } from \"../components/Navigation\";\n\ninterface Props extends EditorProps { }\n\ninterface State {\n  json: string;\n  editorHeight: number;\n}\n\nconst defaultState: State = {\n  json: \"[]\",\n  editorHeight: 0\n}\n\nexport class JSONEditor extends Component<Props, State> {\n  state = defaultState;\n\n  componentDidMount() {\n    this.updateEditorHeight();\n    this.parseSourceItemsToJson();\n\n    window.addEventListener('resize', () => this.updateEditorHeight());\n  }\n\n  componentWillUnmount() {\n    this.setState(defaultState);\n\n    window.removeEventListener('resize', () => this.updateEditorHeight());\n  }\n\n  updateEditorHeight = () => this.setState({\n    editorHeight: window.innerHeight - NAVIGATION_HEIGHT\n  })\n\n  parseSourceItemsToJson = () => this.setState({\n    json: JSON.stringify(this.props.source, null, 2)\n  });\n\n  handleChange = (json: string) => this.setState({\n    json\n  }, () => this.updateSourceItemsByCsvString());\n\n  updateSourceItemsByCsvString = () => {\n    try {\n      const sourceItems = JSON.parse(this.state.json);\n      this.props.onSourceChange(sourceItems);\n    } catch (e) { }\n  }\n\n  render() {\n    return (\n      <AceEditor\n        mode=\"json\"\n        theme=\"github\"\n        onChange={this.handleChange}\n        value={this.state.json}\n        name=\"csv_editor\"\n        width=\"100%\"\n        height={`${this.state.editorHeight}px`}\n        editorProps={{ $blockScrolling: true }}\n      />\n    )\n  }\n}","import React, { Component } from \"react\";\n// @ts-ignore\nimport Spreadsheet from \"react-spreadsheet\";\nimport { debounce } from \"throttle-debounce\";\n\nimport { EditorProps, CellItem } from \"./types\";\n\ninterface Props extends EditorProps { }\n\ninterface GridCellItem {\n  value: string | number | null;\n}\n\ninterface State {\n  grid: GridCellItem[][],\n  activeRow: number;\n  activeCol: number;\n}\n\ninterface OnActivateOptons {\n  column: number;\n  row: number;\n}\n\nconst DEFAULT_CELL_ACTIVE_INDEX = -1;\nconst MIN_GRID_ROWS = 50;\nconst MIN_GRID_COLUMNS = 26;\n\nfunction getEmptyRow(columnsCount: number): GridCellItem[] {\n  const row = [];\n\n  for (let i = 0; i < columnsCount; i++) {\n    row[i] = { value: '' }\n  }\n\n  return row;\n}\n\nfunction getMultipleEmptyRows(rowsCount: number, columnsCount: number): GridCellItem[][] {\n  const emptyRow = getEmptyRow(columnsCount);\n\n  const rows = [];\n\n  for (let i = 0; i < rowsCount; i++) {\n    rows[i] = emptyRow\n  }\n\n  return rows;\n}\n\nconst defaultState: State = {\n  activeRow: DEFAULT_CELL_ACTIVE_INDEX,\n  activeCol: DEFAULT_CELL_ACTIVE_INDEX,\n  grid: []\n}\n\nexport class DataGridEditor extends Component<Props, State> {\n  state = defaultState;\n\n  componentDidMount() {\n    this.parseSourceItemsToGrid();\n  }\n\n  componentWillUnmount() {\n    this.addNewRowIfLastIsActive();\n    this.setState(defaultState);\n  }\n\n  parseSourceItemsToGrid = () => {\n    const { source } = this.props;\n\n    const sourceRowsLength = source.length;\n\n    const grid: GridCellItem[][] = [];\n\n    for (let rowIndex = 0; rowIndex < sourceRowsLength; rowIndex++) {\n      const row = source[rowIndex];\n      const rowColumnsLength = row.length;\n\n      if (!grid[rowIndex]) {\n        grid[rowIndex] = [];\n      }\n\n      for (let rowCellIndex = 0; rowCellIndex < rowColumnsLength; rowCellIndex++) {\n        const _cell = row[rowCellIndex];\n\n        grid[rowIndex][rowCellIndex] = {\n          value: _cell\n        };\n      }\n\n      const columnsToAdd = MIN_GRID_COLUMNS - rowColumnsLength;\n\n      for (let addColumnIndex = 0; addColumnIndex < columnsToAdd; addColumnIndex++) {\n        grid[rowIndex][rowColumnsLength + addColumnIndex] = {\n          value: \"\"\n        };\n      }\n    }\n\n    const rowsToAdd = MIN_GRID_ROWS - sourceRowsLength;\n    const emptyRow = getEmptyRow(grid[0] ? grid[0].length : MIN_GRID_COLUMNS);\n\n    for (let addRowIndex = 0; addRowIndex < rowsToAdd; addRowIndex++) {\n      grid[sourceRowsLength + addRowIndex] = emptyRow;\n    }\n\n    return this.setState({\n      grid\n    });\n  }\n\n  updateSourceItemsByDataGrid = () => {\n    const { grid } = this.state;\n\n    const gridRows = [...grid];\n    const sourceItems: CellItem[][] = [];\n\n    for (let gridRowIndex = 0, gridRowsLength = gridRows.length; gridRowIndex < gridRowsLength; gridRowIndex++) {\n      const reverseGridRows = [...gridRows[gridRowIndex]].reverse();\n\n      const notEmptyCellIndex = reverseGridRows.findIndex(item => Boolean(item.value));\n      const nonEmptyCells = reverseGridRows.slice(notEmptyCellIndex).reverse();\n\n      if (notEmptyCellIndex < 0) {\n        continue;\n      }\n\n      if (!sourceItems[gridRowIndex]) {\n        sourceItems[gridRowIndex] = []\n      }\n\n      for (let nonEmptyCellIndex = 0; nonEmptyCellIndex < nonEmptyCells.length; nonEmptyCellIndex++) {\n        const _cell = nonEmptyCells[nonEmptyCellIndex];\n\n        sourceItems[gridRowIndex][nonEmptyCellIndex] = _cell.value;\n      }\n    }\n\n    this.props.onSourceChange(sourceItems);\n  }\n\n  addNewRowIfLastIsActive = () => {\n    const { activeRow, grid } = this.state;\n\n    if (activeRow === (grid.length - 1)) {\n      this.setState({\n        grid: [\n          ...grid,\n          ...getMultipleEmptyRows(10, grid[0].length)\n        ]\n      });\n    }\n  }\n\n  onActivate = ({ column, row }: OnActivateOptons) => this.setState({\n    activeCol: column,\n    activeRow: row\n  });\n\n  onChange = debounce(100, (grid: GridCellItem[][]) => this.setState({\n    grid\n  }, () => this.updateSourceItemsByDataGrid()));\n\n  render() {\n    return (\n      <Spreadsheet\n        onChange={this.onChange}\n        onActivate={this.onActivate}\n        data={this.state.grid}\n      />\n    )\n  }\n}","import React, { Component } from \"react\";\n\nimport { Navigation } from \"./components/Navigation\";\nimport { SourceItems } from \"./editors/types\";\nimport { CSVEditor } from \"./editors/CSVEditor\";\nimport { JSONEditor } from \"./editors/JSONEditor\";\nimport { DataGridEditor } from \"./editors/DataGridEditor\";\n\nimport \"./App.css\";\n\nexport enum EditorMode {\n  CSV = \"CSV\",\n  GRID = \"GRID\",\n  JSON = \"JSON\"\n}\n\ninterface AppProps { }\n\ninterface AppState {\n  mode: EditorMode;\n  source: SourceItems;\n}\n\nconst modeToComponentMap = Object.freeze({\n  [EditorMode.CSV]: CSVEditor,\n  [EditorMode.JSON]: JSONEditor,\n  [EditorMode.GRID]: DataGridEditor,\n})\n\nexport class App extends Component<AppProps, AppState> {\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      mode: EditorMode.CSV,\n      source: []\n    }\n  }\n\n  handleModeChange = (mode: EditorMode) => this.setState({ mode })\n\n  handleSourceChange = (source: SourceItems) => this.setState({ source })\n\n  render() {\n    const EditorComponent = modeToComponentMap[this.state.mode] || <div>Error</div>;\n\n    return (\n      <div>\n        <Navigation\n          mode={this.state.mode}\n          onModeChange={this.handleModeChange}\n        />\n        <main className=\"Editor\" >\n          <EditorComponent\n            onSourceChange={this.handleSourceChange}\n            source={this.state.source}\n          />\n        </main>\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}